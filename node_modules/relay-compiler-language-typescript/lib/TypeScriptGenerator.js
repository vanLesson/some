"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var relay_compiler_1 = require("relay-compiler");
var FlattenTransform = require("relay-compiler/lib/transforms/FlattenTransform");
var MaskTransform = require("relay-compiler/lib/transforms/MaskTransform");
var MatchTransform = require("relay-compiler/lib/transforms/MatchTransform");
var RefetchableFragmentTransform = require("relay-compiler/lib/transforms/RefetchableFragmentTransform");
var RelayDirectiveTransform = require("relay-compiler/lib/transforms/RelayDirectiveTransform");
var ts = require("typescript");
var TypeScriptTypeTransformers_1 = require("./TypeScriptTypeTransformers");
var REF_TYPE = " $refType";
var FRAGMENT_REFS = " $fragmentRefs";
var DATA_REF = " $data";
var FRAGMENT_REFS_TYPE_NAME = "FragmentRefs";
var DIRECTIVE_NAME = "raw_response_type";
exports.generate = function (schema, node, options) {
    var ast = aggregateRuntimeImports(relay_compiler_1.IRVisitor.visit(node, createVisitor(schema, options)));
    var printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });
    var resultFile = ts.createSourceFile("grapghql-def.ts", "", ts.ScriptTarget.Latest, false, ts.ScriptKind.TS);
    var fullProgramAst = ts.updateSourceFileNode(resultFile, ast);
    return printer.printNode(ts.EmitHint.SourceFile, fullProgramAst, resultFile);
};
function aggregateRuntimeImports(ast) {
    var importNodes = ast.filter(function (declaration) {
        return ts.isImportDeclaration(declaration);
    });
    var runtimeImports = importNodes.filter(function (importDeclaration) {
        return importDeclaration.moduleSpecifier.text ===
            "relay-runtime";
    });
    if (runtimeImports.length > 1) {
        var namedImports_1 = [];
        runtimeImports.map(function (node) {
            node.importClause.namedBindings.elements.map(function (element) {
                namedImports_1.push(element.name.text);
            });
        });
        var importSpecifiers_1 = [];
        namedImports_1.map(function (namedImport) {
            var specifier = ts.createImportSpecifier(undefined, ts.createIdentifier(namedImport));
            importSpecifiers_1.push(specifier);
        });
        var namedBindings = ts.createNamedImports(importSpecifiers_1);
        var aggregatedRuntimeImportDeclaration = ts.createImportDeclaration(undefined, undefined, ts.createImportClause(undefined, namedBindings), ts.createStringLiteral("relay-runtime"));
        var aggregatedRuntimeImportAST = ast.reduce(function (prev, curr) {
            if (!ts.isImportDeclaration(curr))
                prev.push(curr);
            return prev;
        }, [aggregatedRuntimeImportDeclaration]);
        return aggregatedRuntimeImportAST;
    }
    else {
        return ast;
    }
}
function nullthrows(obj) {
    if (obj == null) {
        throw new Error("Obj is null");
    }
    return obj;
}
function makeProp(schema, selection, state, unmasked, concreteType) {
    var value = selection.value;
    var key = selection.key, schemaName = selection.schemaName, conditional = selection.conditional, nodeType = selection.nodeType, nodeSelections = selection.nodeSelections;
    if (schemaName === "__typename" && concreteType) {
        value = ts.createLiteralTypeNode(ts.createLiteral(concreteType));
    }
    else if (nodeType) {
        value = TypeScriptTypeTransformers_1.transformScalarType(schema, nodeType, state, selectionsToAST(schema, [Array.from(nullthrows(nodeSelections).values())], state, unmasked));
    }
    var typeProperty = objectTypeProperty(key, value);
    if (conditional) {
        typeProperty.questionToken = ts.createToken(ts.SyntaxKind.QuestionToken);
    }
    return typeProperty;
}
var isTypenameSelection = function (selection) {
    return selection.schemaName === "__typename";
};
var hasTypenameSelection = function (selections) {
    return selections.some(isTypenameSelection);
};
var onlySelectsTypename = function (selections) {
    return selections.every(isTypenameSelection);
};
function selectionsToAST(schema, selections, state, unmasked, fragmentTypeName) {
    var baseFields = new Map();
    var byConcreteType = {};
    flattenArray(selections).forEach(function (selection) {
        var concreteType = selection.concreteType;
        if (concreteType) {
            byConcreteType[concreteType] = byConcreteType[concreteType] || [];
            byConcreteType[concreteType].push(selection);
        }
        else {
            var previousSel = baseFields.get(selection.key);
            baseFields.set(selection.key, previousSel ? mergeSelection(selection, previousSel) : selection);
        }
    });
    var types = [];
    if (Object.keys(byConcreteType).length > 0 &&
        onlySelectsTypename(Array.from(baseFields.values())) &&
        (hasTypenameSelection(Array.from(baseFields.values())) ||
            Object.keys(byConcreteType).every(function (type) {
                return hasTypenameSelection(byConcreteType[type]);
            }))) {
        var typenameAliases_1 = new Set();
        var _loop_1 = function (concreteType) {
            types.push(groupRefs(__spread(Array.from(baseFields.values()), byConcreteType[concreteType])).map(function (selection) {
                if (selection.schemaName === "__typename") {
                    typenameAliases_1.add(selection.key);
                }
                return makeProp(schema, selection, state, unmasked, concreteType);
            }));
        };
        for (var concreteType in byConcreteType) {
            _loop_1(concreteType);
        }
        // It might be some other type then the listed concrete types. Ideally, we
        // would set the type to diff(string, set of listed concrete types), but
        // this doesn't exist in Flow at the time.
        types.push(Array.from(typenameAliases_1).map(function (typenameAlias) {
            var otherProp = objectTypeProperty(typenameAlias, ts.createLiteralTypeNode(ts.createLiteral("%other")));
            var otherPropWithComment = ts.addSyntheticLeadingComment(otherProp, ts.SyntaxKind.MultiLineCommentTrivia, "This will never be '%other', but we need some\n" +
                "value in case none of the concrete values match.", true);
            return otherPropWithComment;
        }));
    }
    else {
        var selectionMap = selectionsToMap(Array.from(baseFields.values()));
        for (var concreteType in byConcreteType) {
            selectionMap = mergeSelections(selectionMap, selectionsToMap(byConcreteType[concreteType].map(function (sel) { return (__assign(__assign({}, sel), { conditional: true })); })));
        }
        var selectionMapValues = groupRefs(Array.from(selectionMap.values())).map(function (sel) {
            return isTypenameSelection(sel) && sel.concreteType
                ? makeProp(schema, __assign(__assign({}, sel), { conditional: false }), state, unmasked, sel.concreteType)
                : makeProp(schema, sel, state, unmasked);
        });
        types.push(selectionMapValues);
    }
    var typeElements = types.map(function (props) {
        if (fragmentTypeName) {
            props.push(objectTypeProperty(REF_TYPE, ts.createLiteralTypeNode(ts.createStringLiteral(fragmentTypeName))));
        }
        return unmasked
            ? ts.createTypeLiteralNode(props)
            : exactObjectTypeAnnotation(props);
    });
    if (typeElements.length === 1) {
        return typeElements[0];
    }
    return ts.createUnionTypeNode(typeElements);
}
// We don't have exact object types in typescript.
function exactObjectTypeAnnotation(properties) {
    return ts.createTypeLiteralNode(properties);
}
var idRegex = /^[$a-zA-Z_][$a-z0-9A-Z_]*$/;
function objectTypeProperty(propertyName, type, options) {
    if (options === void 0) { options = {}; }
    var optional = options.optional, _a = options.readonly, readonly = _a === void 0 ? true : _a;
    var modifiers = readonly
        ? [ts.createToken(ts.SyntaxKind.ReadonlyKeyword)]
        : undefined;
    return ts.createPropertySignature(modifiers, idRegex.test(propertyName)
        ? ts.createIdentifier(propertyName)
        : ts.createLiteral(propertyName), optional ? ts.createToken(ts.SyntaxKind.QuestionToken) : undefined, type, undefined);
}
function mergeSelection(a, b, shouldSetConditional) {
    if (shouldSetConditional === void 0) { shouldSetConditional = true; }
    if (!a) {
        if (shouldSetConditional) {
            return __assign(__assign({}, b), { conditional: true });
        }
        return b;
    }
    return __assign(__assign({}, a), { nodeSelections: a.nodeSelections
            ? mergeSelections(a.nodeSelections, nullthrows(b.nodeSelections), shouldSetConditional)
            : null, conditional: a.conditional && b.conditional });
}
function mergeSelections(a, b, shouldSetConditional) {
    var e_1, _a, e_2, _b;
    if (shouldSetConditional === void 0) { shouldSetConditional = true; }
    var merged = new Map();
    try {
        for (var _c = __values(Array.from(a.entries())), _d = _c.next(); !_d.done; _d = _c.next()) {
            var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
            merged.set(key, value);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var _f = __values(Array.from(b.entries())), _g = _f.next(); !_g.done; _g = _f.next()) {
            var _h = __read(_g.value, 2), key = _h[0], value = _h[1];
            merged.set(key, mergeSelection(a.get(key), value, shouldSetConditional));
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return merged;
}
function isPlural(node) {
    return Boolean(node.metadata && node.metadata.plural);
}
function exportType(name, type) {
    return ts.createTypeAliasDeclaration(undefined, [ts.createToken(ts.SyntaxKind.ExportKeyword)], ts.createIdentifier(name), undefined, type);
}
function importTypes(names, fromModule) {
    return (names &&
        ts.createImportDeclaration(undefined, undefined, ts.createImportClause(undefined, ts.createNamedImports(names.map(function (name) {
            return ts.createImportSpecifier(undefined, ts.createIdentifier(name));
        }))), ts.createLiteral(fromModule)));
}
function createVisitor(schema, options) {
    var state = {
        customScalars: options.customScalars,
        enumsHasteModule: options.enumsHasteModule,
        existingFragmentNames: options.existingFragmentNames,
        generatedFragments: new Set(),
        generatedInputObjectTypes: {},
        optionalInputFields: options.optionalInputFields,
        usedEnums: {},
        usedFragments: new Set(),
        useHaste: options.useHaste,
        useSingleArtifactDirectory: options.useSingleArtifactDirectory,
        noFutureProofEnums: options.noFutureProofEnums,
        matchFields: new Map(),
        runtimeImports: new Set()
    };
    return {
        leave: {
            Root: function (node) {
                var e_3, _a;
                var inputVariablesType = generateInputVariablesType(schema, node, state);
                var inputObjectTypes = generateInputObjectTypes(state);
                var responseType = exportType(node.name + "Response", selectionsToAST(schema, 
                /* $FlowFixMe: selections have already been transformed */
                node.selections, state, false));
                var operationTypes = [
                    objectTypeProperty("response", ts.createTypeReferenceNode(responseType.name, undefined)),
                    objectTypeProperty("variables", ts.createTypeReferenceNode(inputVariablesType.name, undefined))
                ];
                // Generate raw response type
                var rawResponseType;
                var normalizationIR = options.normalizationIR;
                if (normalizationIR &&
                    node.directives.some(function (d) { return d.name === DIRECTIVE_NAME; })) {
                    rawResponseType = relay_compiler_1.IRVisitor.visit(normalizationIR, createRawResponseTypeVisitor(schema, state));
                }
                var nodes = [];
                if (state.runtimeImports.size) {
                    nodes.push(importTypes(Array.from(state.runtimeImports).sort(), "relay-runtime"));
                }
                nodes.push.apply(nodes, __spread(getFragmentRefsTypeImport(state), getEnumDefinitions(schema, state), inputObjectTypes, [inputVariablesType,
                    responseType]));
                if (rawResponseType) {
                    try {
                        for (var _b = __values(state.matchFields), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var _d = __read(_c.value, 2), key = _d[0], ast = _d[1];
                            nodes.push(exportType(key, ast));
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    operationTypes.push(objectTypeProperty("rawResponse", ts.createTypeReferenceNode(node.name + "RawResponse", undefined)));
                    nodes.push(rawResponseType);
                }
                nodes.push(exportType(node.name, exactObjectTypeAnnotation(operationTypes)));
                return nodes;
            },
            Fragment: function (node) {
                var flattenedSelections = flattenArray(
                /* $FlowFixMe: selections have already been transformed */
                node.selections);
                var numConcreteSelections = flattenedSelections.filter(function (s) { return s.concreteType; }).length;
                var selections = flattenedSelections.map(function (selection) {
                    if (numConcreteSelections <= 1 &&
                        isTypenameSelection(selection) &&
                        !schema.isAbstractType(node.type)) {
                        return [
                            __assign(__assign({}, selection), { concreteType: schema.getTypeString(node.type) })
                        ];
                    }
                    return [selection];
                });
                state.generatedFragments.add(node.name);
                var dataTypeName = getDataTypeName(node.name);
                var dataType = ts.createTypeReferenceNode(node.name, undefined);
                var refTypeName = getRefTypeName(node.name);
                var refTypeDataProperty = objectTypeProperty(DATA_REF, ts.createTypeReferenceNode(dataTypeName, undefined), { optional: true });
                refTypeDataProperty.questionToken = ts.createToken(ts.SyntaxKind.QuestionToken);
                var refTypeFragmentRefProperty = objectTypeProperty(FRAGMENT_REFS, ts.createTypeReferenceNode(FRAGMENT_REFS_TYPE_NAME, [
                    ts.createLiteralTypeNode(ts.createStringLiteral(node.name))
                ]));
                var isPluralFragment = isPlural(node);
                var refType = exactObjectTypeAnnotation([
                    refTypeDataProperty,
                    refTypeFragmentRefProperty
                ]);
                var unmasked = node.metadata != null && node.metadata.mask === false;
                var baseType = selectionsToAST(schema, selections, state, unmasked, unmasked ? undefined : node.name);
                var type = isPlural(node)
                    ? ts.createTypeReferenceNode(ts.createIdentifier("ReadonlyArray"), [
                        baseType
                    ])
                    : baseType;
                state.runtimeImports.add("FragmentRefs");
                return __spread([
                    importTypes(Array.from(state.runtimeImports).sort(), "relay-runtime")
                ], getEnumDefinitions(schema, state), [
                    exportType(node.name, type),
                    exportType(dataTypeName, dataType),
                    exportType(refTypeName, isPluralFragment
                        ? ts.createTypeReferenceNode(ts.createIdentifier("ReadonlyArray"), [refType])
                        : refType)
                ]);
            },
            InlineFragment: function (node) {
                return flattenArray(
                /* $FlowFixMe: selections have already been transformed */
                node.selections).map(function (typeSelection) {
                    return schema.isAbstractType(node.typeCondition)
                        ? __assign(__assign({}, typeSelection), { conditional: true }) : __assign(__assign({}, typeSelection), { concreteType: schema.getTypeString(node.typeCondition) });
                });
            },
            Condition: function (node) {
                return flattenArray(
                /* $FlowFixMe: selections have already been transformed */
                node.selections).map(function (selection) {
                    return __assign(__assign({}, selection), { conditional: true });
                });
            },
            // TODO: Why not inline it like others?
            ScalarField: function (node) {
                return visitScalarField(schema, node, state);
            },
            LinkedField: visitLinkedField,
            ModuleImport: function (node) {
                return [
                    {
                        key: "__fragmentPropName",
                        conditional: true,
                        value: TypeScriptTypeTransformers_1.transformScalarType(schema, schema.expectStringType(), state)
                    },
                    {
                        key: "__module_component",
                        conditional: true,
                        value: TypeScriptTypeTransformers_1.transformScalarType(schema, schema.expectStringType(), state)
                    },
                    {
                        key: "__fragments_" + node.name,
                        ref: node.name
                    }
                ];
            },
            FragmentSpread: function (node) {
                state.usedFragments.add(node.name);
                return [
                    {
                        key: "__fragments_" + node.name,
                        ref: node.name
                    }
                ];
            }
        }
    };
}
function visitScalarField(schema, node, state) {
    return [
        {
            key: node.alias || node.name,
            schemaName: node.name,
            value: TypeScriptTypeTransformers_1.transformScalarType(schema, node.type, state)
        }
    ];
}
function visitLinkedField(node) {
    return [
        {
            key: node.alias || node.name,
            schemaName: node.name,
            nodeType: node.type,
            nodeSelections: selectionsToMap(flattenArray(
            /* $FlowFixMe: selections have already been transformed */
            node.selections), 
            /*
             * append concreteType to key so overlapping fields with different
             * concreteTypes don't get overwritten by each other
             */
            true)
        }
    ];
}
function makeRawResponseProp(schema, _a, state, concreteType) {
    var key = _a.key, schemaName = _a.schemaName, value = _a.value, conditional = _a.conditional, nodeType = _a.nodeType, nodeSelections = _a.nodeSelections, kind = _a.kind;
    if (kind === "ModuleImport") {
        // TODO: In flow one can extend an object type with spread, with TS we need an intersection (&)
        // return ts.createSpread(ts.createIdentifier(key));
        throw new Error("relay-compiler-language-typescript does not support @module yet");
    }
    if (schemaName === "__typename" && concreteType) {
        value = ts.createLiteralTypeNode(ts.createLiteral(concreteType));
    }
    else if (nodeType) {
        value = TypeScriptTypeTransformers_1.transformScalarType(schema, nodeType, state, selectionsToRawResponseBabel(schema, [Array.from(nullthrows(nodeSelections).values())], state, schema.isAbstractType(nodeType) || schema.isWrapper(nodeType)
            ? null
            : schema.getTypeString(nodeType)));
    }
    var typeProperty = objectTypeProperty(key, value);
    if (conditional) {
        typeProperty.questionToken = ts.createToken(ts.SyntaxKind.QuestionToken);
    }
    return typeProperty;
}
function selectionsToMap(selections, appendType) {
    var map = new Map();
    selections.forEach(function (selection) {
        var key = appendType && selection.concreteType
            ? selection.key + "::" + selection.concreteType
            : selection.key;
        var previousSel = map.get(key);
        map.set(key, previousSel ? mergeSelection(previousSel, selection) : selection);
    });
    return map;
}
// Transform the codegen IR selections into TS types
function selectionsToRawResponseBabel(schema, selections, state, nodeTypeName) {
    var baseFields = [];
    var byConcreteType = {};
    flattenArray(selections).forEach(function (selection) {
        var concreteType = selection.concreteType;
        if (concreteType) {
            byConcreteType[concreteType] = byConcreteType[concreteType] || [];
            byConcreteType[concreteType].push(selection);
        }
        else {
            baseFields.push(selection);
        }
    });
    var types = [];
    if (Object.keys(byConcreteType).length) {
        var baseFieldsMap = selectionsToMap(baseFields);
        var _loop_2 = function (concreteType) {
            var mergedSeletions = Array.from(mergeSelections(baseFieldsMap, selectionsToMap(byConcreteType[concreteType]), false).values());
            types.push(exactObjectTypeAnnotation(mergedSeletions.map(function (selection) {
                return makeRawResponseProp(schema, selection, state, concreteType);
            })));
            appendLocal3DPayload(types, mergedSeletions, schema, state, concreteType);
        };
        for (var concreteType in byConcreteType) {
            _loop_2(concreteType);
        }
    }
    if (baseFields.length > 0) {
        types.push(exactObjectTypeAnnotation(baseFields.map(function (selection) {
            return makeRawResponseProp(schema, selection, state, nodeTypeName);
        })));
        appendLocal3DPayload(types, baseFields, schema, state, nodeTypeName);
    }
    return ts.createUnionTypeNode(types);
}
function appendLocal3DPayload(types, selections, schema, state, currentType) {
    var moduleImport = selections.find(function (sel) { return sel.kind === "ModuleImport"; });
    if (moduleImport) {
        // Generate an extra opaque type for client 3D fields
        state.runtimeImports.add("Local3DPayload");
        types.push(ts.createTypeReferenceNode(ts.createIdentifier("Local3DPayload"), [
            stringLiteralTypeAnnotation(moduleImport.documentName),
            exactObjectTypeAnnotation(selections
                .filter(function (sel) { return sel.schemaName !== "js"; })
                .map(function (selection) {
                return makeRawResponseProp(schema, selection, state, currentType);
            }))
        ]));
    }
}
// Visitor for generating raw response type
function createRawResponseTypeVisitor(schema, state) {
    return {
        leave: {
            Root: function (node) {
                return exportType(node.name + "RawResponse", selectionsToRawResponseBabel(schema, 
                /* $FlowFixMe: selections have already been transformed */
                node.selections, state, null));
            },
            InlineFragment: function (node) {
                var typeCondition = node.typeCondition;
                return flattenArray(
                /* $FlowFixMe: selections have already been transformed */
                node.selections).map(function (typeSelection) {
                    return schema.isAbstractType(typeCondition)
                        ? typeSelection
                        : __assign(__assign({}, typeSelection), { concreteType: schema.getTypeString(typeCondition) });
                });
            },
            ScalarField: function (node) {
                return visitScalarField(schema, node, state);
            },
            ClientExtension: function (node) {
                return flattenArray(
                /* $FlowFixMe: selections have already been transformed */
                node.selections).map(function (sel) { return (__assign(__assign({}, sel), { conditional: true })); });
            },
            LinkedField: visitLinkedField,
            Condition: function (node) {
                return flattenArray(
                /* $FlowFixMe: selections have already been transformed */
                node.selections);
            },
            Defer: function (node) {
                return flattenArray(
                /* $FlowFixMe: selections have already been transformed */
                node.selections);
            },
            Stream: function (node) {
                return flattenArray(
                /* $FlowFixMe: selections have already been transformed */
                node.selections);
            },
            ModuleImport: function (node) {
                return visitRawResponseModuleImport(schema, node, state);
            },
            FragmentSpread: function (_node) {
                throw new Error("A fragment spread is found when traversing the AST, " +
                    "make sure you are passing the codegen IR");
            }
        }
    };
}
// Dedupe the generated type of module selections to reduce file size
function visitRawResponseModuleImport(schema, node, state) {
    var selections = node.selections, key = node.name;
    var moduleSelections = selections
        .filter(function (sel) { return sel.length && sel[0].schemaName === "js"; })
        .map(function (arr) { return arr[0]; });
    if (!state.matchFields.has(key)) {
        var ast = selectionsToRawResponseBabel(schema, node.selections.filter(function (sel) { return sel.length > 1 || sel[0].schemaName !== "js"; }), state, null);
        state.matchFields.set(key, ast);
    }
    return __spread(moduleSelections, [
        {
            key: key,
            kind: "ModuleImport",
            documentName: node.documentName
        }
    ]);
}
function flattenArray(arrayOfArrays) {
    var result = [];
    arrayOfArrays.forEach(function (array) { return result.push.apply(result, __spread(array)); });
    return result;
}
function generateInputObjectTypes(state) {
    return Object.keys(state.generatedInputObjectTypes).map(function (typeIdentifier) {
        var inputObjectType = state.generatedInputObjectTypes[typeIdentifier];
        if (inputObjectType === "pending") {
            throw new Error("TypeScriptGenerator: Expected input object type to have been" +
                " defined before calling `generateInputObjectTypes`");
        }
        else {
            return exportType(typeIdentifier, inputObjectType);
        }
    });
}
function generateInputVariablesType(schema, node, state) {
    return exportType(node.name + "Variables", exactObjectTypeAnnotation(node.argumentDefinitions.map(function (arg) {
        return objectTypeProperty(arg.name, TypeScriptTypeTransformers_1.transformInputType(schema, arg.type, state), { readonly: false, optional: !schema.isNonNull(arg.type) });
    })));
}
function groupRefs(props) {
    var result = [];
    var refs = [];
    props.forEach(function (prop) {
        if (prop.ref) {
            refs.push(prop.ref);
        }
        else {
            result.push(prop);
        }
    });
    if (refs.length > 0) {
        var refTypes = ts.createUnionTypeNode(refs.map(function (ref) { return ts.createLiteralTypeNode(ts.createStringLiteral(ref)); }));
        result.push({
            key: FRAGMENT_REFS,
            conditional: false,
            value: ts.createTypeReferenceNode(FRAGMENT_REFS_TYPE_NAME, [refTypes])
        });
    }
    return result;
}
function getFragmentRefsTypeImport(state) {
    if (state.usedFragments.size > 0) {
        return [
            ts.createImportDeclaration(undefined, undefined, ts.createImportClause(undefined, ts.createNamedImports([
                ts.createImportSpecifier(undefined, ts.createIdentifier("FragmentRefs"))
            ])), ts.createStringLiteral("relay-runtime"))
        ];
    }
    return [];
}
function getEnumDefinitions(schema, _a) {
    var enumsHasteModule = _a.enumsHasteModule, usedEnums = _a.usedEnums, noFutureProofEnums = _a.noFutureProofEnums;
    var enumNames = Object.keys(usedEnums).sort();
    if (enumNames.length === 0) {
        return [];
    }
    if (typeof enumsHasteModule === "string") {
        return [importTypes(enumNames, enumsHasteModule)];
    }
    if (typeof enumsHasteModule === "function") {
        return enumNames.map(function (enumName) {
            return importTypes([enumName], enumsHasteModule(enumName));
        });
    }
    return enumNames.map(function (name) {
        var values = __spread(schema.getEnumValues(usedEnums[name]));
        values.sort();
        if (!noFutureProofEnums) {
            values.push("%future added value");
        }
        return exportType(name, ts.createUnionTypeNode(values.map(function (value) { return stringLiteralTypeAnnotation(value); })));
    });
}
function stringLiteralTypeAnnotation(name) {
    return ts.createLiteralTypeNode(ts.createLiteral(name));
}
function getRefTypeName(name) {
    return name + "$key";
}
function getDataTypeName(name) {
    return name + "$data";
}
// Should match FLOW_TRANSFORMS array
// https://github.com/facebook/relay/blob/v6.0.0/packages/relay-compiler/language/javascript/RelayFlowGenerator.js#L621-L627
exports.transforms = [
    RelayDirectiveTransform.transform,
    MaskTransform.transform,
    MatchTransform.transform,
    FlattenTransform.transformWithOptions({}),
    RefetchableFragmentTransform.transform
];
//# sourceMappingURL=data:application/json;base64,