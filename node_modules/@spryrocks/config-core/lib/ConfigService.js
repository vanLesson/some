"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ConfigService {
    constructor(env, app, baseConfig, configFileReader) {
        const files = [`.env`, `.env.local`];
        if (app) {
            files.push(`.env.${app}`, `.env.${app}.local`);
        }
        files.push(`.env.${env}`, `.env.${env}.local`);
        if (app) {
            files.push(`.env.${app}.${env}`, `.env.${app}.${env}.local`);
        }
        this.config = ConfigService.readConfig(files, baseConfig, configFileReader);
    }
    get(key, defaultValue) {
        return ConfigService.requireValue(key, this.getOptional(key), defaultValue);
    }
    getOptional(key) {
        return this.config[key];
    }
    getNumber(key, defaultValue) {
        return ConfigService.requireValue(key, this.getNumberOptional(key), defaultValue);
    }
    getNumberOptional(key) {
        const valueS = this.getOptional(key);
        if (!valueS)
            return undefined;
        const value = Number(valueS);
        if (Number.isNaN(value))
            throw new Error(ConfigService.formatEnvError(key, 'is not a number'));
        return value;
    }
    getBoolean(key, defaultValue) {
        return ConfigService.requireValue(key, this.getBooleanOptional(key), defaultValue);
    }
    getBooleanOptional(key) {
        const valueS = this.getOptional(key);
        if (!valueS)
            return undefined;
        switch (valueS) {
            case 'true':
                return true;
            case 'false':
                return false;
            default:
                throw new Error(ConfigService.formatEnvError(key, 'is not a boolean'));
        }
    }
    static readConfig(files, baseConfig, configFileReader) {
        let config = baseConfig || {};
        for (const file of files) {
            config = Object.assign(Object.assign({}, config), configFileReader.read(file));
        }
        return config;
    }
    static formatEnvError(key, errorMessage) {
        return `env ${key} ${errorMessage}`;
    }
    static requireValue(key, value, defaultValue) {
        if (!value) {
            if (defaultValue)
                return defaultValue;
            throw new Error(ConfigService.formatEnvError(key, 'not found'));
        }
        return value;
    }
}
exports.default = ConfigService;
