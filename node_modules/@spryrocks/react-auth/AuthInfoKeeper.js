"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const async_storage_1 = __importDefault(require("@react-native-community/async-storage"));
class AuthInfoKeeper {
    constructor(delegate, storage) {
        this.delegate = delegate;
        this.authenticate = (resp) => __awaiter(this, void 0, void 0, function* () {
            const session = JSON.stringify(resp);
            yield this.storage.set('session', session);
            this.delegate.setToken(resp.jwt);
        });
        this.update = (resp) => __awaiter(this, void 0, void 0, function* () {
            yield this.authenticate(resp);
        });
        this.getAuthInfo = () => __awaiter(this, void 0, void 0, function* () {
            const session = yield this.storage.get('session');
            if (!session)
                return undefined;
            return JSON.parse(session);
        });
        this.reset = () => __awaiter(this, void 0, void 0, function* () {
            yield this.storage.remove('session');
            this.delegate.setToken(undefined);
        });
        this.syncApiToken = () => __awaiter(this, void 0, void 0, function* () {
            const authInfo = yield this.getAuthInfo();
            if (authInfo) {
                this.delegate.setToken(authInfo.jwt);
            }
            else {
                this.delegate.setToken(undefined);
            }
        });
        if (!storage)
            throw new Error('storage must be provided');
        this.storage = async_storage_1.default.create(storage);
    }
    isAuthenticated() {
        return __awaiter(this, void 0, void 0, function* () {
            return !!(yield this.getAuthInfo());
        });
    }
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.syncApiToken();
        });
    }
}
exports.default = AuthInfoKeeper;
