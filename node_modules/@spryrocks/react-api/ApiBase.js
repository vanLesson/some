"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var promise_queue_1 = __importDefault(require("promise-queue"));
var ApiError_1 = __importDefault(require("./rest/ApiError"));
var ApiBase = /** @class */ (function () {
    function ApiBase(configuration, delegate, tokenHolder) {
        this.configuration = configuration;
        this.delegate = delegate;
        this.tokenHolder = tokenHolder;
        this.refreshQueue = new promise_queue_1.default(1, Infinity);
        var baseUrl = this.configuration.url + ":" + configuration.port;
        if (configuration.globalPrefix)
            baseUrl += configuration.globalPrefix;
        this.baseUrl = baseUrl;
    }
    ApiBase.prototype.wrapApiCall = function (call) {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 6]);
                        return [4 /*yield*/, call()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        e_1 = _a.sent();
                        if (!ApiBase.checkNotAuthorizedError(e_1)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.refreshQueue.add(function () { return _this.refreshTokens(); })];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, call()];
                    case 4: 
                    // eslint-disable-next-line no-return-await
                    return [2 /*return*/, _a.sent()];
                    case 5: throw e_1;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ApiBase.checkNotAuthorizedError = function (e) {
        if (e instanceof ApiError_1.default) {
            return e.status === 401;
        }
        if (Array.isArray(e)) {
            // @ts-ignore
            var gqlError = filter(function (e) { return e.message.statusCode === 401; }, e.graphQLErrors);
            return !!gqlError;
        }
    };
    ApiBase.prototype.refreshTokens = function () {
        return __awaiter(this, void 0, void 0, function () {
            var authInfo, authResponse;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.delegate.getAuthInfo()];
                    case 1:
                        authInfo = _a.sent();
                        if (!authInfo) {
                            throw new Error('Not authorized');
                        }
                        return [4 /*yield*/, this.refreshToken(authInfo.refreshToken)];
                    case 2:
                        authResponse = _a.sent();
                        return [4 /*yield*/, this.delegate.updateAuthInfo(authResponse)];
                    case 3:
                        _a.sent();
                        this.tokenHolder.setToken(authResponse.accessToken);
                        return [2 /*return*/];
                }
            });
        });
    };
    return ApiBase;
}());
exports.default = ApiBase;
