export declare type DataSelector<TData, TSelected> = (data: TData) => TSelected;
export declare type Query<TVariables, TData, TSelected> = {
    query: any;
    variables: TVariables;
    dataSelector: DataSelector<TData, TSelected>;
};
export declare type QueryFunc<TData, TSelected> = () => Query<undefined, TData, TSelected>;
export declare type QueryWithVariablesFunc<TVariables, TData, TSelected> = (variables: TVariables) => Query<TVariables, TData, TSelected>;
export declare const createQuery: <TData, TSelected>(query: any, dataSelector: DataSelector<TData, TSelected>) => QueryFunc<TData, TSelected>;
export declare const createQueryWithVariables: <TVariables, TData, TSelected>(query: any, dataSelector: DataSelector<TData, TSelected>) => QueryWithVariablesFunc<TVariables, TData, TSelected>;
export declare const createMutationWithVariables: <TVariables, TData, TSelected>(query: any, dataSelector: DataSelector<TData, TSelected>) => QueryWithVariablesFunc<TVariables, TData, TSelected>;
export declare const createSubscription: <TData, TSelected>(query: any, dataSelector: DataSelector<TData, TSelected>) => QueryFunc<TData, TSelected>;
export declare const createSubscriptionWithVariables: <TVariables, TData, TSelected>(query: any, dataSelector: DataSelector<TData, TSelected>) => QueryWithVariablesFunc<TVariables, TData, TSelected>;
