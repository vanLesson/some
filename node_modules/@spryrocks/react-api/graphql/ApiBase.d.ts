import { OperationVariables } from 'apollo-client';
import { Query } from './Query';
import ApiConfiguration from './ApiConfiguration';
import ApiDelegate from '../ApiDelegate';
export default abstract class ApiBase {
    private readonly apolloClient;
    constructor(baseUrl: string, configuration: ApiConfiguration, delegate: ApiDelegate);
    protected query<TVariables, TData, TSelected>({ query, variables, dataSelector, }: Query<TVariables, TData, TSelected>): Promise<any>;
    protected mutation<TVariables, TData, TSelected>({ query, variables, dataSelector, }: Query<TVariables, TData, TSelected>): Promise<any>;
    rawQuery<TResult>(query: any, variables?: OperationVariables): Promise<import("apollo-client").ApolloQueryResult<TResult>>;
    rawMutate<TResult>(mutation: any, variables?: OperationVariables): Promise<import("apollo-boost").FetchResult<TResult, Record<string, any>, Record<string, any>>>;
}
