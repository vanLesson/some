"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = __importDefault(require("axios"));
var AxiosLogger = __importStar(require("axios-logger"));
var ApiError_1 = __importDefault(require("./ApiError"));
var ApiHttpError_1 = __importDefault(require("./ApiHttpError"));
var PlatformUtils_1 = require("../utils/PlatformUtils");
var ApiBase = /** @class */ (function () {
    function ApiBase(baseUrl, configuration, delegate) {
        var _this = this;
        this.delegate = delegate;
        this.url = "" + baseUrl + configuration.path;
        this.api = axios_1.default.create({
            baseURL: this.url,
            headers: ApiBase.HEADERS,
        });
        this.api.interceptors.request.use(function (value) {
            return __assign(__assign({}, value), { headers: __assign(__assign({}, value.headers), _this.delegate.getHeaders()) });
        });
        this.api.interceptors.request.use(AxiosLogger.requestLogger, AxiosLogger.errorLogger);
        this.api.interceptors.response.use(AxiosLogger.responseLogger, AxiosLogger.errorLogger);
    }
    ApiBase.wrapApiCall = function (call) {
        return call
            .then(function (response) { return Promise.resolve(ApiBase.handleResponse(response)); })
            .catch(function (response) { return Promise.reject(ApiBase.handleError(response)); });
    };
    ApiBase.prototype.postFile = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var form;
            return __generator(this, function (_a) {
                form = ApiBase.createFormWithFile(uri);
                return [2 /*return*/, this.post('files', form, {
                        headers: __assign(__assign({}, this.delegate.getHeaders()), { 'Content-Type': 'multipart/form-data', data: form }),
                    })];
            });
        });
    };
    ApiBase.createFormWithFile = function (uri) {
        var platform = PlatformUtils_1.detectPlatform();
        switch (platform) {
            case 'web': {
                return this.createFormWithFileWeb(uri);
            }
            case 'react-native': {
                return this.createFormWithFileRN(uri);
            }
            default:
                throw new Error("Not supported platform: " + platform);
        }
    };
    ApiBase.createFormWithFileWeb = function (uri) {
        var form = new FormData();
        var blob = new Blob([uri], { type: 'image/jpeg' });
        form.append('file', blob);
        return form;
    };
    ApiBase.createFormWithFileRN = function (uri) {
        var form = new FormData();
        var data = { uri: uri, type: 'image/jpeg', name: uri };
        // @ts-ignore
        form.append('file', data);
        return form;
    };
    ApiBase.prototype.request = function (config) {
        return ApiBase.wrapApiCall(this.api.request(config));
    };
    ApiBase.prototype.get = function (url, config) {
        return ApiBase.wrapApiCall(this.api.get(url, config));
    };
    ApiBase.prototype.delete = function (url, config) {
        return ApiBase.wrapApiCall(this.api.delete(url, config));
    };
    ApiBase.prototype.head = function (url, config) {
        return ApiBase.wrapApiCall(this.api.head(url, config));
    };
    ApiBase.prototype.post = function (url, data, config) {
        return ApiBase.wrapApiCall(this.api.post(url, data, config));
    };
    ApiBase.prototype.put = function (url, data, config) {
        return ApiBase.wrapApiCall(this.api.put(url, data, config));
    };
    ApiBase.prototype.patch = function (url, data, config) {
        return ApiBase.wrapApiCall(this.api.patch(url, data, config));
    };
    ApiBase.handleError = function (error) {
        var response = error.response;
        if (!response) {
            return new ApiError_1.default(error);
        }
        return new ApiHttpError_1.default(response.status, response.statusText, response.data, error);
    };
    ApiBase.handleResponse = function (response) {
        return response.data;
    };
    ApiBase.HEADERS = {};
    return ApiBase;
}());
exports.default = ApiBase;
