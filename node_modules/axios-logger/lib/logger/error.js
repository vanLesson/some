"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorLogger = errorLogger;
exports.errorLoggerWithoutPromise = errorLoggerWithoutPromise;

var _config = require("../common/config");

var _stringBuilder = _interopRequireDefault(require("../common/string-builder"));

var _print = require("../common/print");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function errorLoggerWithoutPromise(error, config) {
  const {
    config: {
      url,
      method
    },
    response
  } = error;
  let status, statusText, data, headers;

  if (response) {
    status = response.status;
    statusText = response.statusText;
    data = response.data;
    headers = response.headers;
  }

  const buildConfig = (0, _config.assembleBuildConfig)(config);
  const stringBuilder = new _stringBuilder.default(buildConfig);
  const log = stringBuilder.makeLogTypeWithPrefix('Error').makeDateFormat(new Date()).makeUrl(url).makeMethod(method).makeStatus(status, statusText).makeHeader(headers).makeData(data).build();
  (0, _print.printLog)(log);
  return error;
}

function errorLogger(error) {
  return Promise.reject(errorLoggerWithoutPromise(error));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXIvZXJyb3IudHMiXSwibmFtZXMiOlsiZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZSIsImVycm9yIiwiY29uZmlnIiwidXJsIiwibWV0aG9kIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZGF0YSIsImhlYWRlcnMiLCJidWlsZENvbmZpZyIsInN0cmluZ0J1aWxkZXIiLCJTdHJpbmdCdWlsZGVyIiwibG9nIiwibWFrZUxvZ1R5cGVXaXRoUHJlZml4IiwibWFrZURhdGVGb3JtYXQiLCJEYXRlIiwibWFrZVVybCIsIm1ha2VNZXRob2QiLCJtYWtlU3RhdHVzIiwibWFrZUhlYWRlciIsIm1ha2VEYXRhIiwiYnVpbGQiLCJlcnJvckxvZ2dlciIsIlByb21pc2UiLCJyZWplY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxTQUFTQSx5QkFBVCxDQUFtQ0MsS0FBbkMsRUFBc0RDLE1BQXRELEVBQStFO0FBRTNFLFFBQU07QUFBQ0EsSUFBQUEsTUFBTSxFQUFFO0FBQUNDLE1BQUFBLEdBQUQ7QUFBTUMsTUFBQUE7QUFBTixLQUFUO0FBQXdCQyxJQUFBQTtBQUF4QixNQUFvQ0osS0FBMUM7QUFFQSxNQUFJSyxNQUFKLEVBQVlDLFVBQVosRUFBd0JDLElBQXhCLEVBQThCQyxPQUE5Qjs7QUFDQSxNQUFHSixRQUFILEVBQVk7QUFDUkMsSUFBQUEsTUFBTSxHQUFHRCxRQUFRLENBQUNDLE1BQWxCO0FBQ0FDLElBQUFBLFVBQVUsR0FBR0YsUUFBUSxDQUFDRSxVQUF0QjtBQUNBQyxJQUFBQSxJQUFJLEdBQUdILFFBQVEsQ0FBQ0csSUFBaEI7QUFDQUMsSUFBQUEsT0FBTyxHQUFHSixRQUFRLENBQUNJLE9BQW5CO0FBQ0g7O0FBRUQsUUFBTUMsV0FBVyxHQUFHLGlDQUFvQlIsTUFBcEIsQ0FBcEI7QUFFQSxRQUFNUyxhQUFhLEdBQUcsSUFBSUMsc0JBQUosQ0FBa0JGLFdBQWxCLENBQXRCO0FBQ0EsUUFBTUcsR0FBRyxHQUFHRixhQUFhLENBQ3BCRyxxQkFETyxDQUNlLE9BRGYsRUFFUEMsY0FGTyxDQUVRLElBQUlDLElBQUosRUFGUixFQUdQQyxPQUhPLENBR0NkLEdBSEQsRUFJUGUsVUFKTyxDQUlJZCxNQUpKLEVBS1BlLFVBTE8sQ0FLSWIsTUFMSixFQUtZQyxVQUxaLEVBTVBhLFVBTk8sQ0FNSVgsT0FOSixFQU9QWSxRQVBPLENBT0ViLElBUEYsRUFRUGMsS0FSTyxFQUFaO0FBVUEsdUJBQVNULEdBQVQ7QUFFQSxTQUFPWixLQUFQO0FBQ0g7O0FBRUQsU0FBU3NCLFdBQVQsQ0FBcUJ0QixLQUFyQixFQUF3QztBQUNwQyxTQUFPdUIsT0FBTyxDQUFDQyxNQUFSLENBQWV6Qix5QkFBeUIsQ0FBQ0MsS0FBRCxDQUF4QyxDQUFQO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBeGlvc0Vycm9yIH0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgRXJyb3JMb2dDb25maWcgfSBmcm9tICcuLi9jb21tb24vdHlwZXMnO1xuaW1wb3J0IHsgYXNzZW1ibGVCdWlsZENvbmZpZyB9IGZyb20gJy4uL2NvbW1vbi9jb25maWcnO1xuaW1wb3J0IFN0cmluZ0J1aWxkZXIgZnJvbSAnLi4vY29tbW9uL3N0cmluZy1idWlsZGVyJztcbmltcG9ydCB7IHByaW50TG9nIH0gZnJvbSAnLi4vY29tbW9uL3ByaW50JztcblxuZnVuY3Rpb24gZXJyb3JMb2dnZXJXaXRob3V0UHJvbWlzZShlcnJvcjogQXhpb3NFcnJvciwgY29uZmlnPzogRXJyb3JMb2dDb25maWcpIHtcblxuICAgIGNvbnN0IHtjb25maWc6IHt1cmwsIG1ldGhvZH0sIHJlc3BvbnNlfSA9IGVycm9yO1xuXG4gICAgbGV0IHN0YXR1cywgc3RhdHVzVGV4dCwgZGF0YSwgaGVhZGVycztcbiAgICBpZihyZXNwb25zZSl7XG4gICAgICAgIHN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgc3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXR1c1RleHQ7XG4gICAgICAgIGRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICBoZWFkZXJzID0gcmVzcG9uc2UuaGVhZGVycztcbiAgICB9XG5cbiAgICBjb25zdCBidWlsZENvbmZpZyA9IGFzc2VtYmxlQnVpbGRDb25maWcoY29uZmlnKTtcblxuICAgIGNvbnN0IHN0cmluZ0J1aWxkZXIgPSBuZXcgU3RyaW5nQnVpbGRlcihidWlsZENvbmZpZyk7XG4gICAgY29uc3QgbG9nID0gc3RyaW5nQnVpbGRlclxuICAgICAgICAubWFrZUxvZ1R5cGVXaXRoUHJlZml4KCdFcnJvcicpXG4gICAgICAgIC5tYWtlRGF0ZUZvcm1hdChuZXcgRGF0ZSgpKVxuICAgICAgICAubWFrZVVybCh1cmwpXG4gICAgICAgIC5tYWtlTWV0aG9kKG1ldGhvZClcbiAgICAgICAgLm1ha2VTdGF0dXMoc3RhdHVzLCBzdGF0dXNUZXh0KVxuICAgICAgICAubWFrZUhlYWRlcihoZWFkZXJzKVxuICAgICAgICAubWFrZURhdGEoZGF0YSlcbiAgICAgICAgLmJ1aWxkKCk7XG5cbiAgICBwcmludExvZyhsb2cpO1xuXG4gICAgcmV0dXJuIGVycm9yO1xufVxuXG5mdW5jdGlvbiBlcnJvckxvZ2dlcihlcnJvcjogQXhpb3NFcnJvcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvckxvZ2dlcldpdGhvdXRQcm9taXNlKGVycm9yKSk7XG59XG5cbmV4cG9ydCB7IGVycm9yTG9nZ2VyLCBlcnJvckxvZ2dlcldpdGhvdXRQcm9taXNlIH07Il19