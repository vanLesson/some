{"version":3,"file":"index.cjs.js","sources":["../../../dist/core/src/utils/pointers.js","../../../dist/core/src/load-typedefs/options.js","../../../dist/core/src/load-typedefs/load-file.js","../../../dist/core/src/utils/helpers.js","../../../dist/core/src/utils/custom-loader.js","../../../dist/core/src/utils/queue.js","../../../dist/core/src/load-typedefs/collect-sources.js","../../../dist/core/src/import-parser/definition.js","../../../dist/core/src/import-parser/index.js","../../../dist/core/src/filter-document-kind.js","../../../dist/core/src/load-typedefs/parse.js","../../../dist/core/src/load-typedefs.js","../../../dist/core/src/documents.js","../../../dist/core/src/schema.js"],"sourcesContent":["import { asArray } from '@graphql-toolkit/common';\nexport function normalizePointers(unnormalizedPointerOrPointers) {\n    return asArray(unnormalizedPointerOrPointers).reduce((normalizedPointers, unnormalizedPointer) => {\n        if (typeof unnormalizedPointer === 'string') {\n            normalizedPointers[unnormalizedPointer] = {};\n        }\n        else if (typeof unnormalizedPointer === 'object') {\n            Object.assign(normalizedPointers, unnormalizedPointer);\n        }\n        else {\n            throw new Error(`Invalid pointer ${unnormalizedPointer}`);\n        }\n        return normalizedPointers;\n    }, {});\n}\n//# sourceMappingURL=pointers.js.map","import { resolveBuiltinModule, resolveBuiltinModuleSync } from '@graphql-toolkit/common';\nfunction applyDefaultOptions(options) {\n    options.cache = options.cache || {};\n    options.cwd = options.cwd || process.cwd();\n    options.sort = 'sort' in options ? options.sort : true;\n    options.processedFiles = options.processedFiles || new Map();\n}\nexport async function prepareOptions(options) {\n    applyDefaultOptions(options);\n    options.fs = await resolveBuiltinModule('fs', options.fs);\n    options.path = await resolveBuiltinModule('path', options.path);\n    options.os = await resolveBuiltinModule('os', options.os);\n    return options;\n}\nexport async function prepareOptionsSync(options) {\n    applyDefaultOptions(options);\n    options.fs = resolveBuiltinModuleSync('fs', options.fs);\n    options.path = resolveBuiltinModuleSync('path', options.path);\n    options.os = resolveBuiltinModuleSync('os', options.os);\n    return options;\n}\n//# sourceMappingURL=options.js.map","import { debugLog } from '@graphql-toolkit/common';\nexport async function loadFile(pointer, options) {\n    const cached = useCache({ pointer, options });\n    if (cached) {\n        return cached;\n    }\n    for await (const loader of options.loaders) {\n        try {\n            const canLoad = await loader.canLoad(pointer, options);\n            if (canLoad) {\n                return await loader.load(pointer, options);\n            }\n        }\n        catch (error) {\n            debugLog(`Failed to find any GraphQL type definitions in: ${pointer} - ${error.message}`);\n            throw error;\n        }\n    }\n    return undefined;\n}\nexport function loadFileSync(pointer, options) {\n    const cached = useCache({ pointer, options });\n    if (cached) {\n        return cached;\n    }\n    for (const loader of options.loaders) {\n        try {\n            const canLoad = loader.canLoadSync && loader.loadSync && loader.canLoadSync(pointer, options);\n            if (canLoad) {\n                return loader.loadSync(pointer, options);\n            }\n        }\n        catch (error) {\n            debugLog(`Failed to find any GraphQL type definitions in: ${pointer} - ${error.message}`);\n            throw error;\n        }\n    }\n    return undefined;\n}\nfunction useCache({ pointer, options }) {\n    if (pointer in options.cache) {\n        return options.cache[pointer];\n    }\n}\n//# sourceMappingURL=load-file.js.map","import pLimit from 'p-limit';\n/**\n * Converts a string to 32bit integer\n */\nexport function stringToHash(str) {\n    let hash = 0;\n    // tslint:disable-next-line: triple-equals\n    if (str.length == 0) {\n        return hash;\n    }\n    let char;\n    for (let i = 0; i < str.length; i++) {\n        char = str.charCodeAt(i);\n        // tslint:disable-next-line: no-bitwise\n        hash = (hash << 5) - hash + char;\n        // tslint:disable-next-line: no-bitwise\n        hash = hash & hash;\n    }\n    return hash;\n}\nexport function useStack(...fns) {\n    return (input) => {\n        function createNext(i) {\n            if (i >= fns.length) {\n                return () => { };\n            }\n            return function next() {\n                fns[i](input, createNext(i + 1));\n            };\n        }\n        fns[0](input, createNext(1));\n    };\n}\nexport function useLimit(concurrency) {\n    return pLimit(concurrency);\n}\n//# sourceMappingURL=helpers.js.map","export async function getCustomLoaderByPath(path, cwd) {\n    try {\n        const { default: importFrom } = await import('import-from');\n        const requiredModule = importFrom(cwd, path);\n        if (requiredModule) {\n            if (requiredModule.default && typeof requiredModule.default === 'function') {\n                return requiredModule.default;\n            }\n            if (typeof requiredModule === 'function') {\n                return requiredModule;\n            }\n        }\n    }\n    catch (e) { }\n    return null;\n}\nexport function getCustomLoaderByPathSync(path, cwd) {\n    try {\n        let importFrom = require('import-from');\n        importFrom = importFrom.default || importFrom;\n        const requiredModule = importFrom(cwd, path);\n        if (requiredModule) {\n            if (requiredModule.default && typeof requiredModule.default === 'function') {\n                return requiredModule.default;\n            }\n            if (typeof requiredModule === 'function') {\n                return requiredModule;\n            }\n        }\n    }\n    catch (e) { }\n    return null;\n}\nexport async function useCustomLoader(loaderPointer, cwd) {\n    let loader;\n    if (typeof loaderPointer === 'string') {\n        loader = await getCustomLoaderByPath(loaderPointer, cwd);\n    }\n    else if (typeof loaderPointer === 'function') {\n        loader = loaderPointer;\n    }\n    if (typeof loader !== 'function') {\n        throw new Error(`Failed to load custom loader: ${loaderPointer}`);\n    }\n    return loader;\n}\nexport function useCustomLoaderSync(loaderPointer, cwd) {\n    let loader;\n    if (typeof loaderPointer === 'string') {\n        loader = getCustomLoaderByPathSync(loaderPointer, cwd);\n    }\n    else if (typeof loaderPointer === 'function') {\n        loader = loaderPointer;\n    }\n    if (typeof loader !== 'function') {\n        throw new Error(`Failed to load custom loader: ${loaderPointer}`);\n    }\n    return loader;\n}\n//# sourceMappingURL=custom-loader.js.map","import pLimit from 'p-limit';\nexport function useQueue(options) {\n    const queue = [];\n    const limit = (options === null || options === void 0 ? void 0 : options.concurrency) ? pLimit(options.concurrency) : async (fn) => fn();\n    return {\n        add(fn) {\n            queue.push(() => limit(fn));\n        },\n        runAll() {\n            return Promise.all(queue.map(fn => fn()));\n        },\n    };\n}\nexport function useSyncQueue() {\n    const queue = [];\n    return {\n        add(fn) {\n            queue.push(fn);\n        },\n        runAll() {\n            queue.forEach(fn => fn());\n        },\n    };\n}\n//# sourceMappingURL=queue.js.map","import { isDocumentString, parseGraphQLSDL, asArray, printSchemaWithDirectives } from '@graphql-toolkit/common';\nimport { isSchema, Kind, parse } from 'graphql';\nimport isGlob from 'is-glob';\nimport { loadFile, loadFileSync } from './load-file';\nimport { stringToHash, useStack } from '../utils/helpers';\nimport { useCustomLoader, useCustomLoaderSync } from '../utils/custom-loader';\nimport { useQueue, useSyncQueue } from '../utils/queue';\nconst CONCURRENCY_LIMIT = 50;\nexport async function collectSources({ pointerOptionMap, options, }) {\n    var _a;\n    const sources = [];\n    const globs = [];\n    const globOptions = {};\n    const queue = useQueue({ concurrency: CONCURRENCY_LIMIT });\n    const unixify = await import('unixify').then(m => m.default || m);\n    const { addSource, addGlob, collect } = createHelpers({\n        sources,\n        globs,\n        options,\n        globOptions,\n        stack: [collectDocumentString, collectGlob, collectCustomLoader, collectFallback],\n    });\n    for (const pointer in pointerOptionMap) {\n        const pointerOptions = {\n            ...((_a = pointerOptionMap[pointer]) !== null && _a !== void 0 ? _a : {}),\n            unixify,\n        };\n        collect({\n            pointer,\n            pointerOptions,\n            pointerOptionMap,\n            options,\n            addSource,\n            addGlob,\n            queue: queue.add,\n        });\n    }\n    if (globs.length) {\n        includeIgnored({\n            options,\n            unixify,\n            globs,\n        });\n        const { default: globby } = await import('globby');\n        const paths = await globby(globs, createGlobbyOptions(options));\n        collectSourcesFromGlobals({\n            filepaths: paths,\n            options,\n            globOptions,\n            pointerOptionMap,\n            addSource,\n            queue: queue.add,\n        });\n    }\n    await queue.runAll();\n    return sources;\n}\nexport function collectSourcesSync({ pointerOptionMap, options, }) {\n    var _a;\n    const sources = [];\n    const globs = [];\n    const globOptions = {};\n    const queue = useSyncQueue();\n    let unixify = require('unixify');\n    unixify = unixify.default || unixify;\n    const { addSource, addGlob, collect } = createHelpers({\n        sources,\n        globs,\n        options,\n        globOptions,\n        stack: [collectDocumentString, collectGlob, collectCustomLoaderSync, collectFallbackSync],\n    });\n    for (const pointer in pointerOptionMap) {\n        const pointerOptions = {\n            ...((_a = pointerOptionMap[pointer]) !== null && _a !== void 0 ? _a : {}),\n            unixify,\n        };\n        collect({\n            pointer,\n            pointerOptions,\n            pointerOptionMap,\n            options,\n            addSource,\n            addGlob,\n            queue: queue.add,\n        });\n    }\n    if (globs.length) {\n        includeIgnored({\n            options,\n            unixify,\n            globs,\n        });\n        const globby = require('globby');\n        const paths = globby.sync(globs, createGlobbyOptions(options));\n        collectSourcesFromGlobalsSync({\n            filepaths: paths,\n            options,\n            globOptions,\n            pointerOptionMap,\n            addSource,\n            queue: queue.add,\n        });\n    }\n    queue.runAll();\n    return sources;\n}\n//\nfunction createHelpers({ sources, globs, options, globOptions, stack, }) {\n    const addSource = ({ pointer, source, noCache, }) => {\n        sources.push(source);\n        if (!noCache) {\n            options.cache[pointer] = source;\n        }\n    };\n    const collect = useStack(...stack);\n    const addGlob = ({ pointerOptions, pointer }) => {\n        globs.push(pointer);\n        Object.assign(globOptions, pointerOptions);\n    };\n    return {\n        addSource,\n        collect,\n        addGlob,\n    };\n}\nfunction includeIgnored({ options, unixify, globs }) {\n    if (options.ignore) {\n        const ignoreList = asArray(options.ignore)\n            .map(g => `!(${g})`)\n            .map(unixify);\n        if (ignoreList.length > 0) {\n            globs.push(...ignoreList);\n        }\n    }\n}\nfunction createGlobbyOptions(options) {\n    return { absolute: true, ...options, ignore: [] };\n}\nfunction collectSourcesFromGlobals({ filepaths, options, globOptions, pointerOptionMap, addSource, queue, }) {\n    const collectFromGlobs = useStack(collectCustomLoader, collectFallback);\n    for (let i = 0; i < filepaths.length; i++) {\n        const pointer = filepaths[i];\n        collectFromGlobs({\n            pointer,\n            pointerOptions: globOptions,\n            pointerOptionMap,\n            options,\n            addSource,\n            addGlob: () => {\n                throw new Error(`I don't accept any new globs!`);\n            },\n            queue,\n        });\n    }\n}\nfunction collectSourcesFromGlobalsSync({ filepaths, options, globOptions, pointerOptionMap, addSource, queue, }) {\n    const collectFromGlobs = useStack(collectCustomLoaderSync, collectFallbackSync);\n    for (let i = 0; i < filepaths.length; i++) {\n        const pointer = filepaths[i];\n        collectFromGlobs({\n            pointer,\n            pointerOptions: globOptions,\n            pointerOptionMap,\n            options,\n            addSource,\n            addGlob: () => {\n                throw new Error(`I don't accept any new globs!`);\n            },\n            queue,\n        });\n    }\n}\nfunction addResultOfCustomLoader({ pointer, result, addSource, }) {\n    if (isSchema(result)) {\n        addSource({\n            source: {\n                location: pointer,\n                schema: result,\n                document: parse(printSchemaWithDirectives(result)),\n            },\n            pointer,\n            noCache: true,\n        });\n    }\n    else if (result.kind && result.kind === Kind.DOCUMENT) {\n        addSource({\n            source: {\n                document: result,\n                location: pointer,\n            },\n            pointer,\n        });\n    }\n    else if (result.document) {\n        addSource({\n            source: {\n                location: pointer,\n                ...result,\n            },\n            pointer,\n        });\n    }\n}\nfunction collectDocumentString({ pointer, pointerOptions, options, addSource, queue }, next) {\n    if (isDocumentString(pointer)) {\n        return queue(() => {\n            const source = parseGraphQLSDL(`${stringToHash(pointer)}.graphql`, pointer, {\n                ...options,\n                ...pointerOptions,\n            });\n            addSource({\n                source,\n                pointer,\n            });\n        });\n    }\n    next();\n}\nfunction collectGlob({ pointer, pointerOptions, addGlob }, next) {\n    if (isGlob(pointerOptions.unixify(pointer))) {\n        return addGlob({\n            pointer: pointerOptions.unixify(pointer),\n            pointerOptions,\n        });\n    }\n    next();\n}\nfunction collectCustomLoader({ pointer, pointerOptions, queue, addSource, options, pointerOptionMap }, next) {\n    if (pointerOptions.loader) {\n        return queue(async () => {\n            const loader = await useCustomLoader(pointerOptions.loader, options.cwd);\n            const result = await loader(pointer, { ...options, ...pointerOptions }, pointerOptionMap);\n            if (!result) {\n                return;\n            }\n            addResultOfCustomLoader({ pointer, result, addSource });\n        });\n    }\n    next();\n}\nfunction collectCustomLoaderSync({ pointer, pointerOptions, queue, addSource, options, pointerOptionMap }, next) {\n    if (pointerOptions.loader) {\n        return queue(() => {\n            const loader = useCustomLoaderSync(pointerOptions.loader, options.cwd);\n            const result = loader(pointer, { ...options, ...pointerOptions }, pointerOptionMap);\n            if (result) {\n                addResultOfCustomLoader({ pointer, result, addSource });\n            }\n        });\n    }\n    next();\n}\nfunction collectFallback({ queue, pointer, options, pointerOptions, addSource }) {\n    return queue(async () => {\n        const source = await loadFile(pointer, {\n            ...options,\n            ...pointerOptions,\n        });\n        if (source) {\n            addSource({ source, pointer });\n        }\n    });\n}\nfunction collectFallbackSync({ queue, pointer, options, pointerOptions, addSource }) {\n    return queue(() => {\n        const source = loadFileSync(pointer, {\n            ...options,\n            ...pointerOptions,\n        });\n        if (source) {\n            addSource({ source, pointer });\n        }\n    });\n}\n//# sourceMappingURL=collect-sources.js.map","import { keyBy, uniqBy, includes, reverse } from 'lodash';\nimport { Kind, } from 'graphql';\nconst builtinTypes = ['String', 'Float', 'Int', 'Boolean', 'ID', 'Upload'];\nconst builtinDirectives = [\n    'deprecated',\n    'skip',\n    'include',\n    'cacheControl',\n    'key',\n    'external',\n    'requires',\n    'provides',\n    'connection',\n    'client',\n];\n/**\n * Post processing of all imported type definitions. Loops over each of the\n * imported type definitions, and processes it using collectNewTypeDefinitions.\n *\n * @param allDefinitions All definitions from all schemas\n * @param definitionPool Current definitions (from first schema)\n * @param newTypeDefinitions All imported definitions\n * @returns Final collection of type definitions for the resulting schema\n */\nexport function completeDefinitionPool(allDefinitions, definitionPool, newTypeDefinitions) {\n    const visitedDefinitions = {};\n    while (newTypeDefinitions.length > 0) {\n        const schemaMap = keyBy(reverse(allDefinitions), (d) => ('name' in d ? d.name.value : 'schema'));\n        const newDefinition = newTypeDefinitions.shift();\n        const defName = 'name' in newDefinition ? newDefinition.name.value : 'schema';\n        if (visitedDefinitions[defName]) {\n            continue;\n        }\n        const collectedTypedDefinitions = collectNewTypeDefinitions(allDefinitions, definitionPool, newDefinition, schemaMap);\n        newTypeDefinitions.push(...collectedTypedDefinitions);\n        definitionPool.push(...collectedTypedDefinitions);\n        visitedDefinitions[defName] = true;\n    }\n    return uniqBy(definitionPool, 'name.value');\n}\n/**\n * Processes a single type definition, and performs a number of checks:\n * - Add missing interface implementations\n * - Add missing referenced types\n * - Remove unused type definitions\n *\n * @param allDefinitions All definitions from all schemas\n * (only used to find missing interface implementations)\n * @param definitionPool Resulting definitions\n * @param newDefinition All imported definitions\n * @param schemaMap Map of all definitions for easy lookup\n * @returns All relevant type definitions to add to the final schema\n */\nfunction collectNewTypeDefinitions(allDefinitions, definitionPool, newDefinition, schemaMap) {\n    let newTypeDefinitions = [];\n    if (newDefinition.kind !== Kind.DIRECTIVE_DEFINITION) {\n        newDefinition.directives.forEach(collectDirective);\n    }\n    if (newDefinition.kind === Kind.ENUM_TYPE_DEFINITION) {\n        newDefinition.values.forEach((value) => value.directives.forEach(collectDirective));\n    }\n    if (newDefinition.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION) {\n        newDefinition.fields.forEach(collectNode);\n    }\n    if (newDefinition.kind === Kind.INTERFACE_TYPE_DEFINITION) {\n        const interfaceName = newDefinition.name.value;\n        newDefinition.fields.forEach(collectNode);\n        const interfaceImplementations = allDefinitions.filter((d) => d.kind === Kind.OBJECT_TYPE_DEFINITION && d.interfaces.some((i) => i.name.value === interfaceName));\n        newTypeDefinitions.push(...interfaceImplementations);\n    }\n    if (newDefinition.kind === Kind.UNION_TYPE_DEFINITION) {\n        newDefinition.types.forEach((type) => {\n            if (!definitionPool.some((d) => 'name' in d && d.name.value === type.name.value)) {\n                const typeName = type.name.value;\n                const typeMatch = schemaMap[typeName];\n                if (!typeMatch) {\n                    throw new Error(`Couldn't find type ${typeName} in any of the schemas.`);\n                }\n                newTypeDefinitions.push(schemaMap[type.name.value]);\n            }\n        });\n    }\n    if (newDefinition.kind === Kind.OBJECT_TYPE_DEFINITION) {\n        // collect missing interfaces\n        newDefinition.interfaces.forEach((int) => {\n            if (!definitionPool.some((d) => 'name' in d && d.name.value === int.name.value)) {\n                const interfaceName = int.name.value;\n                const interfaceMatch = schemaMap[interfaceName];\n                if (!interfaceMatch) {\n                    throw new Error(`Couldn't find interface ${interfaceName} in any of the schemas.`);\n                }\n                newTypeDefinitions.push(schemaMap[int.name.value]);\n            }\n        });\n        // iterate over all fields\n        newDefinition.fields.forEach((field) => {\n            collectNode(field);\n            // collect missing argument input types\n            field.arguments.forEach(collectNode);\n        });\n    }\n    if (newDefinition.kind === Kind.SCHEMA_DEFINITION) {\n        newDefinition.operationTypes.forEach((operationType) => {\n            if (!definitionPool.some((d) => 'name' in d && d.name.value === operationType.type.name.value)) {\n                const typeName = operationType.type.name.value;\n                const typeMatch = schemaMap[typeName];\n                if (!typeMatch) {\n                    throw new Error(`Couldn't find type ${typeName} in any of the schemas.`);\n                }\n                newTypeDefinitions.push(schemaMap[operationType.type.name.value]);\n            }\n        });\n    }\n    if (newDefinition.kind === Kind.OPERATION_DEFINITION || newDefinition.kind === Kind.FRAGMENT_DEFINITION) {\n        if (newDefinition.selectionSet) {\n            for (const selection of newDefinition.selectionSet.selections) {\n                collectFragments(selection);\n            }\n        }\n    }\n    return newTypeDefinitions;\n    function collectFragments(node) {\n        if (node.kind === Kind.FRAGMENT_SPREAD) {\n            const fragmentName = node.name.value;\n            if (!definitionPool.some((d) => 'name' in d && d.name.value === fragmentName)) {\n                const fragmentMatch = schemaMap[fragmentName];\n                if (!fragmentMatch) {\n                    throw new Error(`Fragment ${fragmentName}: Couldn't find fragment ${fragmentName} in any of the documents.`);\n                }\n                newTypeDefinitions.push(fragmentMatch);\n            }\n        }\n        else if (node.selectionSet) {\n            for (const selection of node.selectionSet.selections) {\n                for (const directive of node.directives) {\n                    collectDirective(directive);\n                }\n                collectFragments(selection);\n            }\n        }\n    }\n    function collectNode(node) {\n        const nodeType = getNamedType(node.type);\n        const nodeTypeName = nodeType.name.value;\n        // collect missing argument input types\n        if (!definitionPool.some((d) => 'name' in d && d.name.value === nodeTypeName) &&\n            !includes(builtinTypes, nodeTypeName)) {\n            const argTypeMatch = schemaMap[nodeTypeName];\n            if (!argTypeMatch) {\n                throw new Error(`Field ${node.name.value}: Couldn't find type ${nodeTypeName} in any of the schemas.`);\n            }\n            newTypeDefinitions.push(argTypeMatch);\n        }\n        node.directives.forEach(collectDirective);\n    }\n    function collectDirective(directive) {\n        const directiveName = directive.name.value;\n        if (!definitionPool.some((d) => 'name' in d && d.name.value === directiveName) &&\n            !includes(builtinDirectives, directiveName)) {\n            const directive = schemaMap[directiveName];\n            if (!directive) {\n                throw new Error(`Directive ${directiveName}: Couldn't find type ${directiveName} in any of the schemas.`);\n            }\n            directive.arguments.forEach(collectNode);\n            newTypeDefinitions.push(directive);\n        }\n    }\n}\n/**\n * Nested visitor for a type node to get to the final NamedType\n *\n * @param {TypeNode} type Type node to get NamedTypeNode for\n * @returns {NamedTypeNode} The found NamedTypeNode\n */\nfunction getNamedType(type) {\n    if (type.kind === Kind.NAMED_TYPE) {\n        return type;\n    }\n    return getNamedType(type.type);\n}\n//# sourceMappingURL=definition.js.map","import { parse, Kind } from 'graphql';\nimport { groupBy, keyBy, isEqual, uniqBy, flatten } from 'lodash';\nimport { loadFile, loadFileSync } from '../load-typedefs/load-file';\nimport { completeDefinitionPool } from './definition';\nimport { compareNodes } from '@graphql-toolkit/common';\nconst gqlExt = /\\.g(raph)?ql(s)?$/;\nfunction isGraphQLFile(f) {\n    return gqlExt.test(f);\n}\nconst IMPORT_FROM_REGEX = /^import\\s+(\\*|(.*))\\s+from\\s+('|\")(.*)('|\");?$/;\nconst IMPORT_DEFAULT_REGEX = /^import\\s+('|\")(.*)('|\");?$/;\n/**\n * Parse a single import line and extract imported types and schema filename\n *\n * @param importLine Import line\n * @returns Processed import line\n */\nexport function parseImportLine(importLine) {\n    if (IMPORT_FROM_REGEX.test(importLine)) {\n        // Apply regex to import line\n        const matches = importLine.match(IMPORT_FROM_REGEX);\n        if (matches && matches.length === 6 && matches[4]) {\n            // Extract matches into named variables\n            const [, wildcard, importsString, , from] = matches;\n            // Extract imported types\n            const imports = wildcard === '*' ? ['*'] : importsString.split(',').map((d) => d.trim());\n            // Return information about the import line\n            return { imports, from };\n        }\n    }\n    else if (IMPORT_DEFAULT_REGEX.test(importLine)) {\n        const [, , from] = importLine.match(IMPORT_DEFAULT_REGEX);\n        return { imports: ['*'], from };\n    }\n    throw new Error(`\n    Import statement is not valid: ${importLine}\n    If you want to have comments starting with '# import', please use ''' instead!\n    You can only have 'import' statements in the following pattern;\n    # import [Type].[Field] from [File]\n  `);\n}\n/**\n * Parse a schema and analyze all import lines\n *\n * @param sdl Schema to parse\n * @returns Array with collection of imports per import line (file)\n */\nexport function parseSDL(sdl) {\n    return sdl\n        .split('\\n')\n        .map((l) => l.trim())\n        .filter((l) => l.startsWith('# import ') || l.startsWith('#import '))\n        .map((l) => l.replace('#', '').trim())\n        .map(parseImportLine);\n}\n/**\n * Main entry point. Recursively process all import statement in a schema\n *\n * @param filePath File path to the initial schema file\n * @returns Single bundled schema with all imported types\n */\nexport async function processImportSyntax(documentSource, options, allDefinitions) {\n    const typeDefinitions = [];\n    // Recursively process the imports, starting by importing all types from the initial schema\n    await collectDefinitions(['*'], documentSource, options, typeDefinitions, allDefinitions);\n    return process({\n        typeDefinitions,\n        options,\n        allDefinitions,\n    });\n}\n/**\n * Main entry point. Recursively process all import statement in a schema\n *\n * @param documentSource File path to the initial schema file\n * @returns Single bundled schema with all imported types\n */\nexport function processImportSyntaxSync(documentSource, options, allDefinitions) {\n    const typeDefinitions = [];\n    // Recursively process the imports, starting by importing all types from the initial schema\n    collectDefinitionsSync(['*'], documentSource, options, typeDefinitions, allDefinitions);\n    return process({\n        typeDefinitions,\n        options,\n        allDefinitions,\n    });\n}\nfunction process({ typeDefinitions, options, allDefinitions, }) {\n    // Post processing of the final schema (missing types, unused types, etc.)\n    // Query, Mutation and Subscription should be merged\n    // And should always be in the first set, to make sure they\n    // are not filtered out.\n    const firstTypes = flatten(typeDefinitions);\n    const secondFirstTypes = typeDefinitions[0];\n    const otherFirstTypes = flatten(typeDefinitions.slice(1));\n    const firstSet = firstTypes.concat(secondFirstTypes, otherFirstTypes);\n    const processedTypeNames = [];\n    const mergedFirstTypes = [];\n    for (const type of firstSet) {\n        if ('name' in type) {\n            if (!processedTypeNames.includes(type.name.value)) {\n                processedTypeNames.push(type.name.value);\n                mergedFirstTypes.push(type);\n            }\n            else {\n                const existingType = mergedFirstTypes.find((t) => t.name.value === type.name.value);\n                if ('fields' in existingType) {\n                    existingType.fields = uniqBy(existingType.fields.concat(type.fields), 'name.value');\n                    if (options.sort) {\n                        existingType.fields = existingType.fields.sort(compareNodes);\n                    }\n                }\n            }\n        }\n    }\n    return completeDefinitionPool(flatten(allDefinitions), firstSet, flatten(typeDefinitions));\n}\n/**\n * Parses a schema into a graphql DocumentNode.\n * If the schema is empty a DocumentNode with empty definitions will be created.\n *\n * @param sdl Schema to parse\n * @returns A graphql DocumentNode with definitions of the parsed sdl.\n */\nexport function getDocumentFromSDL(sdl) {\n    if (isEmptySDL(sdl)) {\n        return {\n            kind: Kind.DOCUMENT,\n            definitions: [],\n        };\n    }\n    return parse(sdl, { noLocation: true });\n}\n/**\n * Check if a schema contains any type definitions at all.\n *\n * @param sdl Schema to parse\n * @returns True if SDL only contains comments and/or whitespaces\n */\nexport function isEmptySDL(sdl) {\n    return (sdl\n        .split('\\n')\n        .map((l) => l.trim())\n        .filter((l) => !(l.length === 0 || l.startsWith('#'))).length === 0);\n}\n/**\n * Resolve the path of an import.\n * First it will try to find a file relative from the file the import is in, if that fails it will try to resolve it as a module so imports from packages work correctly.\n *\n * @param filePath Path the import was made from\n * @param importFrom Path given for the import\n * @returns Full resolved path to a file\n */\nexport function resolveModuleFilePath(filePath, importFrom, options) {\n    const { fs, path } = options;\n    if (fs && path) {\n        const fullPath = path.resolve(options.cwd, filePath);\n        const dirName = path.dirname(fullPath);\n        if (isGraphQLFile(fullPath) && isGraphQLFile(importFrom)) {\n            try {\n                return fs.realpathSync(path.join(dirName, importFrom));\n            }\n            catch (e) {\n                if (e.code === 'ENOENT') {\n                    let resolveFrom = require('resolve-from');\n                    resolveFrom = resolveFrom.default || resolveFrom;\n                    return resolveFrom(dirName, importFrom);\n                }\n            }\n        }\n    }\n    return importFrom;\n}\n/**\n * Recursively process all schema files. Keeps track of both the filtered\n * type definitions, and all type definitions, because they might be needed\n * in post-processing (to add missing types)\n *\n * @param imports Types specified in the import statement\n * @param sdl Current schema\n * @param filePath File location for current schema\n * @param Tracking of processed schemas (for circular dependencies)\n * @param Tracking of imported type definitions per schema\n * @param Tracking of all type definitions per schema\n * @returns Both the collection of all type definitions, and the collection of imported type definitions\n */\nexport async function collectDefinitions(imports, source, options, typeDefinitions, allDefinitions) {\n    const rawModules = preapreRawModules({ allDefinitions, source, imports, options, typeDefinitions });\n    // Process each file (recursively)\n    await Promise.all(rawModules.map(async (module) => {\n        // If it was not yet processed (in case of circular dependencies)\n        const filepath = resolveModuleFilePath(source.location, module.from, options);\n        if (canProcess({\n            options,\n            module,\n            filepath,\n        })) {\n            const result = await loadFile(filepath, options);\n            await collectDefinitions(module.imports, result, options, typeDefinitions, allDefinitions);\n        }\n    }));\n}\n/**\n * Recursively process all schema files. Keeps track of both the filtered\n * type definitions, and all type definitions, because they might be needed\n * in post-processing (to add missing types)\n *\n * @param imports Types specified in the import statement\n * @param sdl Current schema\n * @param filePath File location for current schema\n * @param Tracking of processed schemas (for circular dependencies)\n * @param Tracking of imported type definitions per schema\n * @param Tracking of all type definitions per schema\n * @returns Both the collection of all type definitions, and the collection of imported type definitions\n */\nexport function collectDefinitionsSync(imports, source, options, typeDefinitions, allDefinitions) {\n    const rawModules = preapreRawModules({ allDefinitions, source, imports, options, typeDefinitions });\n    // Process each file (recursively)\n    rawModules.forEach((module) => {\n        // If it was not yet processed (in case of circular dependencies)\n        const filepath = resolveModuleFilePath(source.location, module.from, options);\n        if (canProcess({\n            options,\n            module,\n            filepath,\n        })) {\n            const result = loadFileSync(filepath, options);\n            collectDefinitionsSync(module.imports, result, options, typeDefinitions, allDefinitions);\n        }\n    });\n}\n//\nfunction preapreRawModules({ allDefinitions, imports, options, typeDefinitions, source, }) {\n    // Add all definitions to running total\n    allDefinitions.push(source.document.definitions);\n    // Filter TypeDefinitionNodes by type and defined imports\n    const currentTypeDefinitions = filterImportedDefinitions(imports, source.document.definitions, allDefinitions, options.sort);\n    // Add typedefinitions to running total\n    typeDefinitions.push(currentTypeDefinitions);\n    // Read imports from current file\n    return parseSDL(source.rawSDL);\n}\nfunction canProcess({ options, module, filepath, }) {\n    const processedFile = options.processedFiles.get(filepath);\n    if (!processedFile || !processedFile.find((rModule) => isEqual(rModule, module))) {\n        // Mark this specific import line as processed for this file (for cicular dependency cases)\n        options.processedFiles.set(filepath, processedFile ? processedFile.concat(module) : [module]);\n        return true;\n    }\n    return false;\n}\n/**\n * Filter the types loaded from a schema, first by relevant types,\n * then by the types specified in the import statement.\n *\n * @param imports Types specified in the import statement\n * @param typeDefinitions All definitions from a schema\n * @returns Filtered collection of type definitions\n */\nfunction filterImportedDefinitions(imports, typeDefinitions, allDefinitions, sort) {\n    // This should do something smart with fields\n    const filteredDefinitions = typeDefinitions;\n    if (imports.includes('*')) {\n        if (imports.length === 1 && imports[0] === '*' && allDefinitions.length > 1) {\n            const previousTypeDefinitions = keyBy(flatten(allDefinitions.slice(0, allDefinitions.length - 1)).filter((def) => 'name' in def), (def) => 'name' in def && def.name.value);\n            return typeDefinitions.filter((typeDef) => typeDef.kind === 'ObjectTypeDefinition' && previousTypeDefinitions[typeDef.name.value]);\n        }\n        return filteredDefinitions;\n    }\n    else {\n        const importedTypes = imports.map((i) => i.split('.')[0]);\n        const result = filteredDefinitions.filter((d) => 'name' in d && importedTypes.includes(d.name.value));\n        const fieldImports = imports.filter((i) => i.split('.').length > 1);\n        const groupedFieldImports = groupBy(fieldImports, (x) => x.split('.')[0]);\n        for (const rootType in groupedFieldImports) {\n            const fields = groupedFieldImports[rootType].map((x) => x.split('.')[1]);\n            const objectTypeDefinition = filteredDefinitions.find((def) => 'name' in def && def.name.value === rootType);\n            if (objectTypeDefinition && 'fields' in objectTypeDefinition && !fields.includes('*')) {\n                objectTypeDefinition.fields = objectTypeDefinition.fields.filter((f) => fields.includes(f.name.value) || fields.includes('*'));\n                if (sort) {\n                    objectTypeDefinition.fields.sort(compareNodes);\n                }\n            }\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=index.js.map","import { debugLog } from '@graphql-toolkit/common';\nimport { Kind } from 'graphql';\nexport const filterKind = (content, filterKinds) => {\n    if (content && content.definitions && content.definitions.length && filterKinds && filterKinds.length > 0) {\n        const invalidDefinitions = [];\n        const validDefinitions = [];\n        for (const definitionNode of content.definitions) {\n            if (filterKinds.includes(definitionNode.kind)) {\n                invalidDefinitions.push(definitionNode);\n            }\n            else {\n                validDefinitions.push(definitionNode);\n            }\n        }\n        if (invalidDefinitions.length > 0) {\n            invalidDefinitions.forEach(d => {\n                debugLog(`Filtered document of kind ${d.kind} due to filter policy (${filterKinds.join(', ')})`);\n            });\n        }\n        return {\n            kind: Kind.DOCUMENT,\n            definitions: validDefinitions,\n        };\n    }\n    return content;\n};\n//# sourceMappingURL=filter-document-kind.js.map","import { printSchemaWithDirectives, fixSchemaAst } from '@graphql-toolkit/common';\nimport { printWithComments, resetComments } from '@graphql-toolkit/schema-merging';\nimport { Kind, parse, Source as GraphQLSource } from 'graphql';\nimport { isEmptySDL, processImportSyntax, processImportSyntaxSync } from '../import-parser';\nimport { filterKind } from '../filter-document-kind';\nexport async function parseSource({ partialSource, options, globOptions, pointerOptionMap, addValidSource, cache, }) {\n    if (partialSource) {\n        const input = prepareInput({\n            source: partialSource,\n            options,\n            globOptions,\n            pointerOptionMap,\n        });\n        parseSchema(input);\n        parseRawSDL(input);\n        if (input.source.document) {\n            useKindsFilter(input);\n            useComments(input);\n            await useGraphQLImport(input, () => processImportSyntax(input.source, input.options, cache));\n            collectValidSources(input, addValidSource);\n        }\n    }\n}\nexport function parseSourceSync({ partialSource, options, globOptions, pointerOptionMap, addValidSource, cache, }) {\n    if (partialSource) {\n        const input = prepareInput({\n            source: partialSource,\n            options,\n            globOptions,\n            pointerOptionMap,\n        });\n        parseSchema(input);\n        parseRawSDL(input);\n        if (input.source.document) {\n            useKindsFilter(input);\n            useComments(input);\n            useGraphQLImport(input, () => processImportSyntaxSync(input.source, input.options, cache));\n            collectValidSources(input, addValidSource);\n        }\n    }\n}\n//\nfunction prepareInput({ source, options, globOptions, pointerOptionMap, }) {\n    const specificOptions = {\n        ...options,\n        ...(source.location in pointerOptionMap ? globOptions : pointerOptionMap[source.location]),\n    };\n    return { source: { ...source }, options: specificOptions };\n}\nfunction parseSchema(input) {\n    if (input.source.schema) {\n        input.source.schema = fixSchemaAst(input.source.schema, input.options);\n        input.source.rawSDL = printSchemaWithDirectives(input.source.schema, input.options);\n    }\n}\nfunction parseRawSDL(input) {\n    if (input.source.rawSDL) {\n        input.source.document = isEmptySDL(input.source.rawSDL)\n            ? {\n                kind: Kind.DOCUMENT,\n                definitions: [],\n            }\n            : parse(new GraphQLSource(input.source.rawSDL, input.source.location), input.options);\n    }\n}\nfunction useKindsFilter(input) {\n    if (input.options.filterKinds) {\n        input.source.document = filterKind(input.source.document, input.options.filterKinds);\n    }\n}\nfunction useComments(input) {\n    if (!input.source.rawSDL) {\n        input.source.rawSDL = printWithComments(input.source.document);\n        resetComments();\n    }\n}\nfunction useGraphQLImport(input, definitionsGetter) {\n    if (input.options.forceGraphQLImport ||\n        (!input.options.skipGraphQLImport && /^\\#.*import /i.test(input.source.rawSDL.trimLeft()))) {\n        function rewriteDoc(definitions) {\n            input.source.document = {\n                kind: Kind.DOCUMENT,\n                definitions,\n            };\n        }\n        const result = definitionsGetter();\n        if (isPromise(result)) {\n            return result.then(rewriteDoc);\n        }\n        rewriteDoc(result);\n    }\n}\nfunction isPromise(val) {\n    return val instanceof Promise;\n}\nfunction collectValidSources(input, addValidSource) {\n    if (input.source.document.definitions && input.source.document.definitions.length > 0) {\n        addValidSource(input.source);\n    }\n}\n//# sourceMappingURL=parse.js.map","import { compareStrings } from '@graphql-toolkit/common';\nimport { normalizePointers } from './utils/pointers';\nimport { prepareOptions, prepareOptionsSync } from './load-typedefs/options';\nimport { collectSources, collectSourcesSync } from './load-typedefs/collect-sources';\nimport { parseSource, parseSourceSync } from './load-typedefs/parse';\nimport { useLimit } from './utils/helpers';\nconst CONCURRENCY_LIMIT = 100;\nexport async function loadTypedefs(pointerOrPointers, options) {\n    const pointerOptionMap = normalizePointers(pointerOrPointers);\n    const globOptions = {};\n    await prepareOptions(options);\n    const sources = await collectSources({\n        pointerOptionMap,\n        options,\n    });\n    const validSources = [];\n    const definitionsCacheForImport = [];\n    // If we have few k of files it may be an issue\n    const limit = useLimit(CONCURRENCY_LIMIT);\n    await Promise.all(sources.map(partialSource => limit(() => parseSource({\n        partialSource,\n        options,\n        globOptions,\n        pointerOptionMap,\n        addValidSource(source) {\n            validSources.push(source);\n        },\n        cache: definitionsCacheForImport,\n    }))));\n    return prepareResult({ options, pointerOptionMap, validSources });\n}\nexport function loadTypedefsSync(pointerOrPointers, options) {\n    const pointerOptionMap = normalizePointers(pointerOrPointers);\n    const globOptions = {};\n    prepareOptionsSync(options);\n    const sources = collectSourcesSync({\n        pointerOptionMap,\n        options,\n    });\n    const validSources = [];\n    const definitionsCacheForImport = [];\n    sources.forEach(partialSource => {\n        parseSourceSync({\n            partialSource,\n            options,\n            globOptions,\n            pointerOptionMap,\n            addValidSource(source) {\n                validSources.push(source);\n            },\n            cache: definitionsCacheForImport,\n        });\n    });\n    return prepareResult({ options, pointerOptionMap, validSources });\n}\n//\nfunction prepareResult({ options, pointerOptionMap, validSources, }) {\n    const pointerList = Object.keys(pointerOptionMap);\n    if (pointerList.length > 0 && validSources.length === 0) {\n        throw new Error(`\n      Unable to find any GraphQL type definitions for the following pointers: \n        ${pointerList.map(p => `\n          - ${p}\n          `)}`);\n    }\n    return options.sort\n        ? validSources.sort((left, right) => compareStrings(left.location, right.location))\n        : validSources;\n}\n//# sourceMappingURL=load-typedefs.js.map","import { Kind } from 'graphql';\nimport { loadTypedefs, loadTypedefsSync } from './load-typedefs';\nexport const OPERATION_KINDS = [Kind.OPERATION_DEFINITION, Kind.FRAGMENT_DEFINITION];\nexport const NON_OPERATION_KINDS = Object.keys(Kind)\n    .reduce((prev, v) => [...prev, Kind[v]], [])\n    .filter(v => !OPERATION_KINDS.includes(v));\nexport function loadDocuments(documentDef, options) {\n    return loadTypedefs(documentDef, { noRequire: true, filterKinds: NON_OPERATION_KINDS, ...options });\n}\nexport function loadDocumentsSync(documentDef, options) {\n    return loadTypedefsSync(documentDef, { noRequire: true, filterKinds: NON_OPERATION_KINDS, ...options });\n}\n//# sourceMappingURL=documents.js.map","import { loadTypedefs, loadTypedefsSync } from './load-typedefs';\nimport { Source as GraphQLSource, print } from 'graphql';\nimport { OPERATION_KINDS } from './documents';\nimport { mergeSchemasAsync, mergeSchemas } from '@graphql-toolkit/schema-merging';\nexport async function loadSchema(schemaPointers, options) {\n    const sources = await loadTypedefs(schemaPointers, {\n        filterKinds: OPERATION_KINDS,\n        ...options,\n    });\n    const { schemas, typeDefs } = collectSchemasAndTypeDefs(sources);\n    const mergeSchemasOptions = {\n        schemas,\n        typeDefs,\n        ...options,\n    };\n    const schema = await mergeSchemasAsync(mergeSchemasOptions);\n    if (options.includeSources) {\n        includeSources(schema, sources);\n    }\n    return schema;\n}\nexport function loadSchemaSync(schemaPointers, options) {\n    const sources = loadTypedefsSync(schemaPointers, {\n        filterKinds: OPERATION_KINDS,\n        ...options,\n    });\n    const { schemas, typeDefs } = collectSchemasAndTypeDefs(sources);\n    const mergeSchemasOptions = {\n        schemas,\n        typeDefs,\n        ...options,\n    };\n    const schema = mergeSchemas(mergeSchemasOptions);\n    if (options.includeSources) {\n        includeSources(schema, sources);\n    }\n    return schema;\n}\nfunction includeSources(schema, sources) {\n    schema.extensions = {\n        ...schema.extensions,\n        sources: sources\n            .filter((source) => source.rawSDL || source.document)\n            .map((source) => new GraphQLSource(source.rawSDL || print(source.document), source.location)),\n    };\n}\nfunction collectSchemasAndTypeDefs(sources) {\n    const schemas = [];\n    const typeDefs = [];\n    sources.forEach((source) => {\n        if (source.schema) {\n            schemas.push(source.schema);\n        }\n        else {\n            typeDefs.push(source.document);\n        }\n    });\n    return {\n        schemas,\n        typeDefs,\n    };\n}\n//# sourceMappingURL=schema.js.map"],"names":["asArray","resolveBuiltinModule","resolveBuiltinModuleSync","debugLog","isSchema","parse","printSchemaWithDirectives","Kind","isDocumentString","parseGraphQLSDL","keyBy","reverse","uniqBy","includes","process","flatten","compareNodes","isEqual","groupBy","fixSchemaAst","GraphQLSource","printWithComments","resetComments","CONCURRENCY_LIMIT","compareStrings","mergeSchemasAsync","mergeSchemas","print"],"mappings":"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"}